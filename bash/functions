#!/usr/bin/env bash

get_column() {
    if [ "$#" -lt 2 ]; then
        echo "Usage: get_column <file> <column_number>"
        exit 1
    fi

    file=$1
    column=$2

    if [ ! -f "$file" ]; then
        echo "File not found: $file"
        exit 1
    fi

    awk -v col="$column" -F ' ' '{print $col}' "$file"
}

col() {
    awk '{print $1}'
}

gwt() {
    local REPO=$1
    local WORKING_BRANCH=$2

    # Remove the existing symbolic link
    rm "/opt/$REPO"

    # Create new symbolic links for the specified working branch
    ln -sfn "/opt/$REPO-repo/secret" "/opt/$REPO-repo/$WORKING_BRANCH"
    ln -sfn "/opt/$REPO-repo/.venv" "/opt/$REPO-repo/$WORKING_BRANCH"
    ln -sfn "/opt/$REPO-repo/.envrc" "/opt/$REPO-repo/$WORKING_BRANCH"
    ln -sfn "/opt/$REPO-repo/$WORKING_BRANCH" "/opt/$REPO"

    # Change directory and allow direnv
    cd "/opt/$REPO/" && direnv allow

    if [[ $REPO = "chomp" ]]; then
        touch /opt/chomp/etc/excludes.txt
    fi
}

ai_git_commit() {
    staged_files=$(git diff --name-only --cached)
    if [ -z "$staged_files" ]; then
        echo "No files are staged for commit."
    fi

    for file in $staged_files; do
        diff_output=$(git diff --cached "$file")

        commit_message=$(echo "$diff_output" | llm -m 4o -s "Generate a concise git commit message that summarizes the key changes in $file. Stay high-level and combine smaller changes to overarching topics. Skip describing any reformatting changes.")

        git commit -m "$commit_message" "$file"
    done
}

format_mac() {
    if [ -f "$1" ]; then
        rex='s/(..)/\1:/g' # add colon after every 2 chars
        # If the input is a file, read and format each MAC address in the file
        while read -r mac; do
            echo "$mac" | sed -E "$rex" | sed 's/:$//' | tr 'a-f' 'A-F' # second `sed` removes any extra colons
        done <"$1"
    else
        # If the input is a single MAC address, format it directly
        echo "$1" | sed -E "$rex" | sed 's/:$//' | tr 'a-f' 'A-F'
    fi
}

sgpt() {
    local query="$*"
    "$HOME/.dotfiles/.venv/bin/python3" -m sgpt "$query"
}

system_prompt="
You are a highly efficient CLI assistant. When processing a query, provide clear, direct, and concise responses tailored for command-line usage. Focus on the core of the user's request and avoid unnecessary commentary or verbosity. Break down complex tasks into simple, step-by-step instructions only if it enhances clarity. If the query is ambiguous, ask for clarification before proceeding.
"

ai() {
    llm -s "$system_prompt" -m 4o "$*" | glow
}

aim() {
    llm -s "$system_prompt" -m 4o-mini "$*" | glow
}

ai1() {
    llm -s "$system_prompt" -m o1 "$*" | glow
}

ai3() {
    llm -s "$system_prompt" -m o3-mini -o reasoning_effort high "$*" | glow
}
